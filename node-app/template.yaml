apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: node-express-demo-template
  title: Node.js Express Demo Application
  description: Creates a Node.js Express application with REST API endpoints, Docker containerization, and Jenkins CI/CD
spec:
  owner: development
  type: service

  parameters:
    - title: Application Configuration
      required:
        - component_id
        - user_name
        - owner
      properties:
        component_id:
          title: Component name
          type: string
          description: Provide a component (microservice) name
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        user_name:
          title: Application User
          type: string
          description: The user name that will be used in the application greeting (only letters, numbers, and underscores allowed)
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          default: 'BackstageUser'
        owner:
          title: Owner
          type: string
          description: The owner of the component
          default: 'devops'

    - title: Jenkins Configuration
      required:
        - jenkins_server
      properties:
        jenkins_server:
          title: Jenkins Server URL
          type: string
          description: Your Jenkins server URL (e.g., http://jenkins.local:8080)
          pattern: '^https?://.*'
          default: 'https://jenkins-qortexone.qburst.build/'

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          user_name: ${{parameters.user_name}}
          owner: ${{parameters.owner}}
          jenkins_server: ${{parameters.jenkins_server}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: Node.js Express Demo Application - ${{ parameters.component_id }}
        repoUrl: github.com?owner=febinqburst&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: jenkins-folder
      name: Create Jenkins Folder
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/createItem?name=${{ parameters.component_id }}-pipeline
        headers:
          Content-Type: application/xml
        body: |
          <?xml version='1.0' encoding='UTF-8'?>
          <com.cloudbees.hudson.plugins.folder.Folder plugin="cloudbees-folder">
            <description>Pipeline folder for ${{ parameters.component_id }}</description>
            <properties/>
            <healthMetrics>
              <com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
                <nonRecursive>false</nonRecursive>
              </com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
            </healthMetrics>
          </com.cloudbees.hudson.plugins.folder.Folder>

    - id: jenkins-job
      name: Create Jenkins Main Pipeline
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/job/${{ parameters.component_id }}-pipeline/createItem?name=main
        headers:
          Content-Type: application/xml
        body: |
          <?xml version='1.0' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job">
            <description>Main branch CI/CD Pipeline for ${{ parameters.component_id }}</description>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps">
              <scm class="hudson.plugins.git.GitSCM" plugin="git">
                <userRemoteConfigs>
                  <hudson.plugins.git.UserRemoteConfig>
                    <url>${{ steps['publish'].output.remoteUrl }}</url>
                  </hudson.plugins.git.UserRemoteConfig>
                </userRemoteConfigs>
                <branches>
                  <hudson.plugins.git.BranchSpec>
                    <name>*/main</name>
                  </hudson.plugins.git.BranchSpec>
                </branches>
              </scm>
              <scriptPath>Jenkinsfile</scriptPath>
              <lightweight>true</lightweight>
            </definition>
            <triggers>
              <com.cloudbees.jenkins.GitHubPushTrigger plugin="github">
                <spec></spec>
              </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
            <disabled>false</disabled>
          </flow-definition>

    - id: trigger-build
      name: Trigger Main Build
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/job/${{ parameters.component_id }}-pipeline/job/main/build

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Jenkins Job
        url: ${{ parameters.jenkins_server }}/job/${{ parameters.component_id }}-pipeline/job/main
      - title: API Documentation
        url: ${{ steps['publish'].output.remoteUrl }}/blob/main/README.md 