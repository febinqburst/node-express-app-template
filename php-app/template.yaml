apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: php-demo-template
  title: PHP Demo Application
  description: Creates a beautiful PHP application with REST API endpoints, Docker containerization, and Jenkins CI/CD
spec:
  owner: development
  type: service

  parameters:
    - title: Application Configuration
      required:
        - component_id
        - user_name
      properties:
        component_id:
          title: Component name
          type: string
          description: Provide a component (microservice) name
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        user_name:
          title: Application User
          type: string
          description: The user name that will be used in the application greeting (only letters, numbers, and underscores allowed)
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          default: 'BackstageUser'

    - title: Jenkins Configuration
      required:
        - jenkins_server
      properties:
        jenkins_server:
          title: Jenkins Server URL
          type: string
          description: Your Jenkins server URL (e.g., http://jenkins.local:8080)
          pattern: '^https?://.*'
          default: 'https://jenkins.febinmathew.click'

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          user_name: ${{parameters.user_name}}
          jenkins_server: ${{parameters.jenkins_server}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: PHP Demo Application - ${{ parameters.component_id }}
        repoUrl: github.com?owner=febinqburst&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: jenkins-job
      name: Create Jenkins Multibranch Pipeline
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/createItem?name=${{ parameters.component_id }}-pipeline
        headers:
          Content-Type: application/xml
        body: |
          <?xml version='1.0' encoding='UTF-8'?>
          <org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin="workflow-multibranch">
            <actions/>
            <description>Multibranch CI/CD Pipeline for ${{ parameters.component_id }}</description>
            <properties/>
            <folderViews class="jenkins.branch.MultiBranchProjectViewHolder" plugin="branch-api">
              <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
            </folderViews>
            <healthMetrics>
              <com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin="cloudbees-folder">
                <nonRecursive>false</nonRecursive>
              </com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
            </healthMetrics>
            <icon class="jenkins.branch.MetadataActionFolderIcon" plugin="branch-api">
              <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
            </icon>
            <orphanedItemStrategy class="com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy" plugin="cloudbees-folder">
              <pruneDeadBranches>true</pruneDeadBranches>
              <daysToKeep>-1</daysToKeep>
              <numToKeep>-1</numToKeep>
            </orphanedItemStrategy>
            <triggers>
              <com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin="cloudbees-folder">
                <spec>H H * * *</spec>
                <interval>86400000</interval>
              </com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger>
            </triggers>
            <disabled>false</disabled>
            <sources class="jenkins.branch.BranchSource" plugin="branch-api">
              <source class="jenkins.plugins.git.GitSCMSource" plugin="git">
                <id>git-source-${{ parameters.component_id }}</id>
                <remote>${{ steps['publish'].output.remoteUrl }}</remote>
                <credentialsId></credentialsId>
                <traits>
                  <jenkins.plugins.git.traits.BranchDiscoveryTrait>
                    <strategyId>1</strategyId>
                  </jenkins.plugins.git.traits.BranchDiscoveryTrait>
                </traits>
              </source>
              <strategy class="jenkins.branch.DefaultBranchPropertyStrategy" plugin="branch-api">
                <properties class="empty-list"/>
              </strategy>
            </sources>
            <factory class="org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory" plugin="workflow-multibranch">
              <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
              <scriptPath>Jenkinsfile</scriptPath>
            </factory>
          </org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject>

    - id: trigger-scan
      name: Trigger Branch Scan
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/job/${{ parameters.component_id }}-pipeline/indexing/build

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Jenkins Job
        url: ${{ parameters.jenkins_server }}/job/${{ parameters.component_id }}-pipeline/job/main
      - title: API Documentation
        url: ${{ steps['publish'].output.remoteUrl }}/blob/main/README.md 